--Mastering SQL: Your Essential Guide for DATA EDA AND ETL

--Step 1: Calling Up My Table

SELECT *
FROM Portfolio..mod4_peer_rev_data$;

--Step 2: Cleaning And Prepering My Data For Analysis

-- 2a: CREATING TEMPT TABLE

DROP TABLE IF EXISTS sales_Retail;
CREATE TABLE sales_Retail (
Date DATE
, Department VARCHAR(10)
, Category VARCHAR(17)
, CustomerCode VARCHAR(11)
,Price BIGINT
,Quantity BIGINT
);
INSERT INTO sales_Retail (Date, Department, Category, CustomerCode, Price, Quantity)
SELECT Date, Department, Category, CustomerCode, Price, Quantity
FROM Portfolio..mod4_peer_rev_data$
WHERE Price is not null
AND Quantity is not null; --this will create a Tempt table sales_Retail


--STEP 2b: ADD A NEW COLUMN ‘REVENUE’ TO THE TABLE
ALTER TABLE sales_Retail
ADD Revenue DECIMAL(18, 2);


-- STEP 2c: REMOVE UNWANTED SYMBOLS AND COMMAS FROM PRICE AND QUANTITY COLUMNS

UPDATE sales_Retail
SET Price = REPLACE(Price, '$', ''), 
    Quantity = REPLACE(Quantity, ',', '') -- Remove the dollar sign and commas

--Step 3: Simple SQL Analysis

-- 3a: fill the Revenue colume in sales_Retail table

SET Revenue = Price * Quantity;

--3b: SHOWING THE TOP 20 CUSTOMERS, NUMBER OF ITEM BOUGHT, AND TOTAL REVENUE GENERATED
SELECT TOP 20
    CustomerCode,
    SUM(Quantity) AS total_Items,
    SUM(Revenue) AS Total_Revenue
FROM
    sales_Retail
GROUP BY
    CustomerCode
ORDER BY
    total_Items DESC;

--3c :LOOKING FOR OUTLIER USING Z SCORE
--creating CTE, this enables you not to alter the integrity of your tables and you can refer to it if need be
DROP TABLE IF EXISTS SalesClean;
	; WITH sales_CTE AS (
    SELECT
        Date,
        Department,
        Category,
        CustomerCode,
        Price,
        Quantity,
        Revenue,
        (Revenue - AVG(Revenue) OVER ()) / STDEV(Revenue) OVER () AS RevenueZScore
    FROM sales_Retail
)
SELECT
    Date,
    Department,
    Category,
    CustomerCode,
    Price,
    Quantity,
    Revenue,
    RevenueZScore
INTO SalesClean -- Creates a subset table with the exclusion of outliers
FROM sales_CTE
WHERE RevenueZScore > 1.645 OR RevenueZScore < -1.645;

--call up Salesclean table
SELECT * 
FROM SalesClean;

--SHOWING THE TOP 10 CUSTOMERS, NUMBER OF ITEM BOUGHT AND TOTAL REVENU GENERATED
SELECT TOP 10
    CustomerCode,
    SUM(Quantity) AS total_Items,
    SUM(Revenue) AS Total_Revenue
FROM
    SalesClean
GROUP BY
    CustomerCode
ORDER BY
    total_Items DESC;

--How Many Transactions Made By Cwm11331l80 By Category
	SELECT
    Category,
    COUNT(CustomerCode) AS NumberOfTransactions
FROM
    SalesClean
WHERE
    CustomerCode LIKE '%CWM11331L8O%'
GROUP BY
    Category
ORDER BY
    NumberOfTransactions DESC;

--SHOW TOTAL REVENUE GENERATED BY DEPARTMENT

SELECT
    Department,
    SUM(Revenue) AS Total_Revenue
FROM
    SalesClean
GROUP BY
    Department
ORDER BY
    Total_Revenue DESC;

--SALES TRAND BY QUNTITY SOLD

SELECT
    Category,
    SUM(Quantity) AS QuantitySold
FROM
    SalesClean
GROUP BY
    Category
ORDER BY
    QuantitySold DESC;

--3d: SALESE TRAND AT MONTH LEVEL

SELECT
    DATENAME(MONTH, Date) AS Month,
    SUM(Quantity) AS TotalSales,
    SUM(Revenue) AS TotalRevenue
FROM
    SalesClean
GROUP BY
    DATENAME(MONTH, Date)
ORDER BY
    TotalRevenue DESC;

--3e: SALESE TRAND BY YEAR LEVEL
SELECT
    DATENAME(YEAR, Date) AS Year,
    SUM(Quantity) AS TotalSales,
    SUM(Revenue) AS TotalRevenue
FROM
    SalesClean
GROUP BY
    DATENAME(YEAR, Date)
ORDER BY
    TotalRevenue DESC;

--3f: SHOWING CATEGORY WITH REVENUE GREATER THAN 600
SELECT
    Category,
    MAX(Revenue) AS HighestRevenue,
    SUM(Revenue) AS TotalRevenue
FROM
    SalesClean
GROUP BY
    Category
HAVING
    MAX(Revenue) > 600
ORDER BY
    TotalRevenue DESC;

--3g:TOTAL NUMBER OF CUSTOMERS
SELECT
    COUNT(DISTINCT CustomerCode) AS UniqueCustomers
FROM
    SalesClean;

--3h: TOTAL NUMBER OF TRANSACTIONS
SELECT
    COUNT(CustomerCode) AS NumberTransaction
FROM
    SalesClean;


--3i: NUMBER OF TRANSACTION BY YEAR
SELECT
    DATENAME(YEAR, Date) AS Year,
    COUNT(CustomerCode) AS NumberTransaction
FROM
    SalesClean
GROUP BY
    DATENAME(YEAR, Date)
ORDER BY
    NumberTransaction DESC;


--3j: USING CASE TO CATEGORIZE BASED ON REVENUE BY YEAR
SELECT
    DATENAME(YEAR, Date) AS Year,
    CASE
        WHEN SUM(Revenue) >= 90000000 THEN 'High'
        WHEN SUM(Revenue) >= 70000000 THEN 'Medium'
        ELSE 'Low'
    END AS RevenueGenerated
FROM
    sales_Retail
GROUP BY
    DATENAME(YEAR, Date)
ORDER BY
    DATENAME(YEAR, Date) DESC;








